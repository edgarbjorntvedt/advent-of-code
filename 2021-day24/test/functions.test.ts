import * as chai from 'chai'
import {inp, get, init, add, mul, div, mod, eql} from "../src/functions"
chai.should()

describe('basic functions unit test', () => {
    beforeEach(init)

    describe('inp', () => {
        it('import and print a number for x', () => {
            inp('x', '1')
            get('x').should.equal(1)
            get('y').should.equal(0)
            get('z').should.equal(0)
            get('w').should.equal(0)
        })
        it('import and print a number for y', () => {
            inp('y', '4')
            get('x').should.equal(0)
            get('y').should.equal(4)
            get('z').should.equal(0)
            get('w').should.equal(0)
        })
        it('import and print a number for z', () => {
            inp('z', '2')
            get('x').should.equal(0)
            get('y').should.equal(0)
            get('z').should.equal(2)
            get('w').should.equal(0)
        })
        it('import and print a number for w', () => {
            inp('w', '3')
            get('x').should.equal(0)
            get('y').should.equal(0)
            get('z').should.equal(0)
            get('w').should.equal(3)
        })
    })
    describe('add', () => {
        it('should add a number to a variable', () => {
            inp('x', '1')
            add('x', '1')
            get('x').should.equal(2)
        })
        it('should add two variables', () => {
            inp('x', '1')
            inp('y', '2')
            add('x', 'y')
            get('x').should.equal(3)
            get('y').should.equal(2)
        })
    })
    describe('mul', () => {
        it('should multiply with a number', () => {
            inp('x', '2')
            mul('x', '2')
            get('x').should.equal(4)
        })
        it('should multiply two variables', () => {
            inp('x', '3')
            inp('y', '3')
            mul('x', 'y')
            get('x').should.equal(9)
            get('y').should.equal(3)
        })
    })
    describe('div', () => {
        it('should divide with a number', () => {
            inp('x', '6')
            div('x', '3')
            get('x').should.equal(2)
        })
        it('should divide two variables', () => {
            inp('x', '15')
            inp('y', '3')
            div('x', 'y')
            get('x').should.equal(5)
            get('y').should.equal(3)
        })
        it('should round down positive numbers', () => {
            inp('x', '5')
            inp('y', '2')
            div('x', 'y')
            get('x').should.equal(2)
            get('y').should.equal(2)
        })
        it('should round up negative numbers', () => {
            inp('x', '5')
            inp('y', '-2')
            div('x', 'y')
            get('x').should.equal(-2)
            get('y').should.equal(-2)
        })
    })
    describe('mod', () => {
        it('should mod with a number', () => {
            inp('x', '10')
            mod('x', '3')
            get('x').should.equal(1)
        })
        it('should mod two variables', () => {
            inp('x', '10')
            inp('y', '3')
            mod('x', 'y')
            get('x').should.equal(1)
            get('y').should.equal(3)
        })
    })
    describe('eql', () => {
        it('should eql with a number', () => {
            inp('x', '4')
            eql('x', '4')
            get('x').should.equal(1)
        })
        it('should not eql with a number', () => {
            inp('x', '4')
            eql('x', '5')
            get('x').should.equal(0)
        })
        it('should eql two variables', () => {
            inp('x', '4')
            inp('y', '4')
            eql('x', 'y')
            get('x').should.equal(1)
            get('y').should.equal(4)
        })
        it('should not eql two variables', () => {
            inp('x', '4')
            inp('y', '5')
            eql('x', 'y')
            get('x').should.equal(0)
        })
    })
    describe('test scenario', () => {
        it('should calculate correct answer of 15', () => {
            inp('w', '15')
            add('z', 'w')
            mod('z', '2')
            div('w', '2')
            add('y', 'w')
            mod('y', '2')
            div('w', '2')
            add('x', 'w')
            mod('x', '2')
            div('w', '2')
            mod('w', '2')
            get('w').should.equal(1)
            get('x').should.equal(1)
            get('y').should.equal(1)
            get('z').should.equal(1)
        })
        it('should calculate correct answer of 9', () => {
            inp('w', '9')
            add('z', 'w')
            mod('z', '2')
            div('w', '2')
            add('y', 'w')
            mod('y', '2')
            div('w', '2')
            add('x', 'w')
            mod('x', '2')
            div('w', '2')
            mod('w', '2')
            get('w').should.equal(1)
            get('x').should.equal(0)
            get('y').should.equal(0)
            get('z').should.equal(1)
        })
    })
})